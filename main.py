"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
–í—Å–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã, –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
"""

import re
import telebot
from telebot import types
from datetime import datetime
from config import Config, logger
from extensions import APIException, CryptoConverter

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(Config.TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
user_states = {}

def create_inline_markup(items: list, row_width: int = 3) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.InlineKeyboardMarkup(row_width=row_width)
    buttons = [types.InlineKeyboardButton(item, callback_data=item) for item in items]
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥—ã
    for i in range(0, len(buttons), row_width):
        markup.add(*buttons[i:i+row_width])
    
    return markup

def create_main_menu() -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ['/convert', '/values', '/help']
    markup.add(*buttons)
    return markup

def format_timestamp(ts: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —á–∏—Ç–∞–µ–º—É—é –¥–∞—Ç—É"""
    if not ts:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
    return datetime.fromtimestamp(ts).strftime('%d.%m.%Y %H:%M:%S')

@bot.message_handler(commands=['start', 'help'])
def start(message: telebot.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –∏ /help —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—É—Å—Ç–∏–ª /start")
    text = (
        'üí± *–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç* üí±\n\n'
        'üîπ *–ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –∏–∑–º–µ–Ω–∏—Ç–µ):*\n'
        '```\n'
        '<–∏–∑ –≤–∞–ª—é—Ç—ã> <–≤ –≤–∞–ª—é—Ç—É> <—Å—É–º–º–∞>\n'
        '–î–æ–ª–ª–∞—Ä –†—É–±–ª—å 100\n'
        '–ë–∏—Ç–∫–æ–∏–Ω –ï–≤—Ä–æ 0.5\n'
        '–≠—Ñ–∏—Ä–∏—É–º –†—É–±–ª—å 1.2 --commission=1.5\n'
        '```\n\n'
        'üîπ *–°–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –∏–∑–º–µ–Ω–∏—Ç–µ):*\n'
        '```\n'
        '100 USD + 50 EUR –≤ RUB\n'
        '0.5 BTC * 42000 USD –≤ EUR\n'
        '(100 USD * 1.1) –≤ JPY\n'
        '5000 RUB / 75.5 –≤ USD\n'
        '100 USD to BTC + 0.01 ETH to BTC\n'
        '```\n\n'
        '‚öôÔ∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n'
        '/convert - –ø–æ—à–∞–≥–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è\n'
        '/values - —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç\n'
        '/help - —Å–ø—Ä–∞–≤–∫–∞\n\n'
        'üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∏:*\n'
        '- –í—ã–¥–µ–ª—è–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∫–æ–ø–∏—Ä—É–π—Ç–µ –∏—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n'
        '- –í–∞–ª—é—Ç—É –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ –ª—é–±–æ–º –ø–∞–¥–µ–∂–µ (–†—É–±–ª—å, –†—É–±–ª–µ–π, –†—É–±–ª–∏)\n'
        '- –ö–æ–º–∏—Å—Å–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ `--commission=X`\n'
        '- –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π\n'
        '- –ü—Ä–∏ –æ—à–∏–±–∫–µ API –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã'
    )
    bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=create_main_menu())

@bot.message_handler(commands=['values'])
def values(message: telebot.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /values - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª /values")
    text = 'üìä *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:*\n'
    for name, code in Config.CURRENCIES.items():
        text += f"\n- {name} ({code})"
    bot.reply_to(message, text, parse_mode='Markdown', reply_markup=create_main_menu())

@bot.message_handler(commands=['convert'])
def convert_command(message: telebot.types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /convert
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—É—Å—Ç–∏–ª /convert")
    if len(message.text.split()) > 1:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
        process_text_command(message)
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        user_states[message.chat.id] = {'step': 1, 'base': None, 'quote': None}
        text = 'üîπ *–®–∞–≥ 1 –∏–∑ 3:* –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, *–∏–∑* –∫–æ—Ç–æ—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:'
        currencies = list(Config.CURRENCIES.keys())
        bot.send_message(message.chat.id, text, parse_mode='Markdown', 
                         reply_markup=create_inline_markup(currencies))

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    chat_id = call.message.chat.id
    state = user_states.get(chat_id, {})
    
    if state.get('step') == 1:
        # –®–∞–≥ 1: –í—ã–±–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã
        base_currency = call.data
        state['base'] = base_currency
        state['step'] = 2
        
        text = 'üîπ *–®–∞–≥ 2 –∏–∑ 3:* –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, *–≤* –∫–æ—Ç–æ—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:'
        currencies = [c for c in Config.CURRENCIES.keys() if c != base_currency]
        bot.edit_message_text(text, chat_id, call.message.message_id, 
                             parse_mode='Markdown', 
                             reply_markup=create_inline_markup(currencies))
    
    elif state.get('step') == 2:
        # –®–∞–≥ 2: –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã
        quote_currency = call.data
        state['quote'] = quote_currency
        state['step'] = 3
        
        text = f'üîπ *–®–∞–≥ 3 –∏–∑ 3:* –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {state["base"]} –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ {state["quote"]}:'
        bot.edit_message_text(text, chat_id, call.message.message_id, parse_mode='Markdown')
    
    user_states[chat_id] = state
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('step') == 3)
def amount_handler(message: telebot.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    chat_id = message.chat.id
    state = user_states.get(chat_id, {})
    if not state:
        bot.send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /convert", reply_markup=create_main_menu())
        return
        
    amount_str = message.text.strip()
    base_key = state.get('base')
    quote_key = state.get('quote')
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–≤–µ–ª —Å—É–º–º—É: {amount_str} –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {base_key}->{quote_key}")
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        amount = float(amount_str)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        result, timestamp = CryptoConverter.get_price(base_key, quote_key, amount)
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        formatted_result = f"{result:.3f}"
        time_str = format_timestamp(timestamp)
        
        answer_text = (
            f'üí± *–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:*\n'
            f'`{amount} {base_key} = {formatted_result} {quote_key}`\n'
            f'üìÖ *–ö—É—Ä—Å –∞–∫—Ç—É–∞–ª–µ–Ω –Ω–∞:* {time_str}'
        )
        bot.send_message(chat_id, answer_text, parse_mode='Markdown', reply_markup=create_main_menu())
        logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {amount} {base_key} -> {formatted_result} {quote_key}")
    except ValueError:
        error_text = f"‚ùå –û—à–∏–±–∫–∞: '{amount_str}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º\nüîπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {base_key} –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"
        bot.send_message(chat_id, error_text, reply_markup=create_main_menu())
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞: {amount_str}")
    except APIException as e:
        error_text = f'‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n{e}\nüîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏'
        bot.send_message(chat_id, error_text, reply_markup=create_main_menu())
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è {chat_id}: {str(e)}")
    except Exception as e:
        error_text = f'‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:\n{str(e)}\nüîπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
        bot.send_message(chat_id, error_text, reply_markup=create_main_menu())
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}")
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if chat_id in user_states:
            del user_states[chat_id]

def process_text_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /convert —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    try:
        text = message.text.replace('/convert', '').strip()
        process_text_conversion(message, text)
    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\nüîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        bot.reply_to(message, error_text, reply_markup=create_main_menu())
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_text_command: {str(e)}")

def process_text_conversion(message, text):
    """
    –ü–∞—Ä—Å–∏—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    """
    chat_id = message.chat.id
    try:
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã
        parts = text.split()
        commission = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é –≤ –∫–æ–Ω—Ü–µ –∫–æ–º–∞–Ω–¥—ã
        if len(parts) > 3 and parts[-1].startswith('--commission='):
            try:
                commission_str = parts[-1].split('=')[1].replace('%', '')
                commission = float(commission_str)
                parts = parts[:-1]  # –£–¥–∞–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–º–∏—Å—Å–∏–∏
            except ValueError:
                error_text = (
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∏—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: --commission=1.5\n"
                    "üîπ –ü—Ä–∏–º–µ—Ä: '–î–æ–ª–ª–∞—Ä –ï–≤—Ä–æ 100 --commission=1.5'"
                )
                bot.reply_to(message, error_text, reply_markup=create_main_menu())
                return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å—Ç–µ–π
        if len(parts) < 3:
            bot.reply_to(
                message, 
                '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!\n'
                'üîπ *–§–æ—Ä–º–∞—Ç:* `<–∏–∑ –≤–∞–ª—é—Ç—ã> <–≤ –≤–∞–ª—é—Ç—É> <—Å—É–º–º–∞>`\n'
                'üîπ *–ü—Ä–∏–º–µ—Ä—ã:*\n'
                '- `–ï–≤—Ä–æ –†—É–±–ª—å 100`\n'
                '- `–ë–∏—Ç–∫–æ–∏–Ω –î–æ–ª–ª–∞—Ä 0.5`\n\n'
                'üí° –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é: `--commission=1.5`',
                parse_mode='Markdown',
                reply_markup=create_main_menu()
            )
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π)
        base = ' '.join(parts[:-2])
        quote = parts[-2]
        amount_str = parts[-1]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∞–ª—é—Ç
        base_key = CryptoConverter.normalize_currency_name(base)
        quote_key = CryptoConverter.normalize_currency_name(quote)
        
        if not base_key:
            bot.reply_to(
                message, 
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞: {base}\n"
                "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /values –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç",
                reply_markup=create_main_menu()
            )
            return
            
        if not quote_key:
            bot.reply_to(
                message, 
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞: {quote}\n"
                "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /values –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç",
                reply_markup=create_main_menu()
            )
            return

        try:
            amount_val = float(amount_str)
        except ValueError:
            bot.reply_to(
                message, 
                f"‚ùå –û—à–∏–±–∫–∞: '{amount_str}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º\n"
                f"üîπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {base_key} –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏",
                reply_markup=create_main_menu()
            )
            return

        try:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            result, timestamp = CryptoConverter.get_price(base_key, quote_key, amount_val, commission)
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            formatted_result = f"{result:.3f}"
            time_str = format_timestamp(timestamp)
            
            commission_text = f" (–∫–æ–º–∏—Å—Å–∏—è: {commission}%)" if commission > 0 else ""
            answer_text = (
                f'üí± *–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:*\n'
                f'`{amount_val} {base_key} = {formatted_result} {quote_key}{commission_text}`\n'
                f'üìÖ *–ö—É—Ä—Å –∞–∫—Ç—É–∞–ª–µ–Ω –Ω–∞:* {time_str}'
            )
            bot.reply_to(message, answer_text, parse_mode='Markdown', reply_markup=create_main_menu())
            logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {amount_val} {base_key} -> {formatted_result} {quote_key}")
        except APIException as e:
            error_text = f'‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n{e}\nüîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏'
            bot.reply_to(message, error_text, reply_markup=create_main_menu())
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è {chat_id}: {str(e)}")
            
    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\nüîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        bot.reply_to(message, error_text, reply_markup=create_main_menu())
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_text_conversion: {str(e)}")

@bot.message_handler(content_types=['text'])
def text_converter(message: telebot.types.Message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    text = message.text.strip()
    chat_id = message.chat.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å: {text}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–∂–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    if re.search(r'[\+\-\*\/]', text) and (' –≤ ' in text or ' to ' in text):
        try:
            total_usd, target_currency = CryptoConverter.process_complex_expression(text)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ USD –≤ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É
            result, timestamp = CryptoConverter.get_price('USD', target_currency, total_usd)
            formatted_result = f"{result:.3f}"
            time_str = format_timestamp(timestamp)
            
            response_text = (
                f'üí± *–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–∂–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:*\n'
                f'`{text}`\n\n'
                f'üîπ *–ò—Ç–æ–≥:* {total_usd:.2f} USD = {formatted_result} {target_currency}\n'
                f'üìÖ *–ö—É—Ä—Å –∞–∫—Ç—É–∞–ª–µ–Ω –Ω–∞:* {time_str}'
            )
            bot.reply_to(message, response_text, parse_mode='Markdown')
            logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: {text}")
        except APIException as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏:\n{str(e)}"
            bot.reply_to(message, error_text)
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–ª–æ–∂–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è {chat_id}: {str(e)}")
        except Exception as e:
            error_text = f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            bot.reply_to(message, error_text)
            logger.error(f"–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–ª–æ–∂–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏: {str(e)}")
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        process_text_conversion(message, text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True, interval=1)